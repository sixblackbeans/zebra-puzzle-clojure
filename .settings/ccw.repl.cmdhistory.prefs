cmdhistory=[";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" ";; Switching to zebra-puzzle.core namespace" "(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" ";; Switching to zebra-puzzle.core namespace" "(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" "(println orderings)" "(count  orderings)" "(defn immediate-right? [h1, h2]\\n  \\"Checks if h1 is immediately right of h2\\"\\n  (\= 1 (- h1 h2)))" "(immediate-right? 3 2)" "(immediate-right? 3 3)" "(abs -1)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" ";; Switching to zebra-puzzle.core namespace" "(clojure.core/in-ns 'zebra-puzzle.core)" "(abs -1)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" ";; Switching to zebra-puzzle.core namespace" "(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest replace-me ;; FIXME\: write\\n  (is false \\"No tests have been written.\\"))\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(run-tests)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest immediate-right?\\n  (is (true? (immediate-right 2 1))))\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(run-tests)" "(clojure.test/run-tests)" "(clojure.test/run-all-tests)" "(clojure.test/run-tests)" "(clojure.test/run-all-tests)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(clojure.test/run-all-tests)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\nnull\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\nnull\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest immediate-right-test\\n  (is (true? (immediate-right? 2 1)))\\n  (is (false? (immediate-right? 1 1))))\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\nnull\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\nnull\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\nnull\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest immediate-right-test\\n  (is (true? (immediate-right? 2 1)))\\n  (is (false? (immediate-right? 1 1))))\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest immediate-right-test\\n  (is (true? (immediate-right? 2 1)))\\n  (is (false? (immediate-right? 1 1)))\\n  (is (false? (immediate-right? 1 2))))\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(deftest next-to-test\\n  (is (true? (next-to? 1 2)))\\n  (is (true? (next-to? 2 1)))\\n  (is (false? (next-to? 1 3))))\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/test/zebra_puzzle/test/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj" "(clojure.core/in-ns 'zebra-puzzle.test.core)\\n(run-tests)\\n(clojure.core/in-ns 'zebra-puzzle.core)" "(for [x (range 3)\\n      y (range 3)]\\n  [x y])" "(for [[red, green, ivory, yellow, blue] orderings\\n      [englishman, spaniard, ukranian, japanese, norwegian] orderings]\\n  [red englishman])" ";; Loading file /home/sixblackbeans/workspace-indigo/zebra-puzzle/src/zebra_puzzle/core.clj"]
eclipse.preferences.version=1
